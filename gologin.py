import os, requests, random

# Allow workspace-specific host via env, fallback to public API
BASE_URL = os.getenv("GLOGIN_BASE_URL", "https://api.gologin.com")

class GoLogin:
    """Minimal wrapper for GoLogin cloud profiles REST API."""

    def __init__(self, token: str | None = None):
        if token is None:
            token = os.environ.get("GLOGIN_API_TOKEN")
        if not token:
            raise RuntimeError("GLOGIN_API_TOKEN env var missing")
        self.session = requests.Session()
        self.session.headers["Authorization"] = f"Bearer {token}"

    # ---------------------------------------------------------------------
    # Profile lifecycle helpers
    # ---------------------------------------------------------------------
    def create_profile(
        self,
        name: str,
        region: str,
        timezone: str,
        locale: str,
        proxy_conf: dict,
    ) -> str:
        """Create a new browser profile.

        Returns the new profile _id.
        """
        payload = {
            "name": name,
            "notes": "Autogenerated by script",
            "browserType": "chrome",
            "os": "win",  # windows fingerprint for broad compatibility
            "navigator": {
                "language": locale,
                "userAgent": self._random_ua(region),
                "resolution": "1920x1080",
                "platform": "Win32",
            },
            "geoProxyInfo": {"timezone": timezone},
            "proxyEnabled": True,
            "proxy": proxy_conf,
        }
        resp = self.session.post(f"{BASE_URL}/browser", json=payload, timeout=30)
        resp.raise_for_status()
        data = resp.json()
        return data.get("_id") or data.get("id")

    def update_profile(self, profile_id: str, **updates):
        resp = self.session.patch(
            f"{BASE_URL}/browser/{profile_id}", json=updates, timeout=30
        )
        resp.raise_for_status()

    def start_profile(self, profile_id: str) -> str:
        """Start a profile and return the CDP websocket URL."""
        # Two variants exist; try workspace host style first
        start_url = f"{BASE_URL}/browser/{profile_id}/start"
        params = {"automation": 1}
        resp = self.session.get(start_url, params=params, timeout=60)
        if resp.status_code == 404:
            # Fallback to cloud query-param variant
            resp = self.session.post(
                f"{BASE_URL}/browser/start",
                params={"profileId": profile_id, "automation": 1},
                timeout=60,
            )
        resp.raise_for_status()
        return resp.json().get("wsUrl")

    def stop_profile(self, profile_id: str):
        stop_url = f"{BASE_URL}/browser/{profile_id}/stop"
        r = self.session.get(stop_url, timeout=30)
        if r.status_code == 404:
            self.session.post(f"{BASE_URL}/browser/stop", params={"profileId": profile_id}, timeout=30)

    # ------------------------------------------------------------------
    # Internal helpers
    # ------------------------------------------------------------------
    @staticmethod
    def _random_ua(region: str) -> str:
        chrome_ver = random.randint(122, 124)
        return (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            f"Chrome/{chrome_ver}.0.0.0 Safari/537.36"
        )